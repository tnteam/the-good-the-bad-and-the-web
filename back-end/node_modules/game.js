/**
 * Created by rafik-naccache on 07/12/14.
 */

var game_data = require('game-data');
var _ = require('underscore');
var players = require('players');
var utils = require('utils');


/**
 *
 * @param attack is Player.Attack
 * @param defense is Player.defense
 */

var  rules = new game_data.init_data();

var Board = function() {
    this.players = [];
    this.attacks = [];
    this.defenses = [];
    this.transacts= [];

}

function validate_attack(attack){
    var outcome = rules.possible_attacks[utils.hash_obj_tuple(attack.source_aptitude,attack.target_vulnerability)];
    if (outcome) {return {valid:true,outcome:outcome};}
    return {valid:false};
}


function validate_defense(defense){
    var outcome=rules.possible_defenses[utils.hash_obj_tuple(defense.attack.source_aptitude,defense.defense_aptitude)];
    if (outcome) {return {valid:true, outcome:outcome};}
    return {valid:false};
}

function validate_transact(transact){
    var outcome = rules.possible_transactions[utils.hash_obj_tuple(transact.source_aptitude,transact.target_aptitude)];
    if (outcome) {return {valid:true, outcome : outcome};}
    return {valid:false};
}


Board.prototype.all_entities = function() {
    var entity_arrays = _.map(Board.players,function(pl) {return pl.entities});
    return _.flatten(entity_arrays);
}

Board.prototype.add_player = function(player) {
       var exists = _.some(this.players,function(pl){return pl.name == player.name});
    if (!exists) {
        this.players.push(player);
        return true;

    }
     return false;

}
Board.prototype.remove_player = function(player) {
    this.players = _.without(this.players,player);
}

module.exports.Board = Board;
module.exports.validate_attack=validate_attack;
module.exports.validate_defense = validate_defense;
module.exports.validate_transact = validate_transact;
