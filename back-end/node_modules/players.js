/**
 * Created by rafik-naccache on 07/12/14.
 */
var entities = require('entities');
var _ = require('underscore');


function Player(parameters) {
    this.name = parameters.name;
    this.game_id = parameters.game_id;
    this.entities = parameters.entities;
    this.webmana = parameters.webmana;

}


function Attack(parameters) {
    this.name = parameters.name;

    this.source_player = parameters.source_player;
    this.source_entity = parameters.source_entity;
    this.source_aptitude = parameters.source_aptitude;

    this.target_player = parameters.target_player;
    this.target_entity = parameters.target_entity;
    this.target_vulnerability = parameters.target_vulnerability;

}

Attack.prototype.to_text_fields = function(){

return    {
    name : this.name,
    source_player : this.source_player.name,
    source_entity : this.source_entity.name,
    source_aptitude : this.source_aptitude.name,
    target_player : this.target.name,
    target_entity : this.target_entity.name,
    target_vulnerability : this.target_vulnerability.name}
}

function Defense(parameters) {
    this.name = parameters.name;
    this.attack = parameters.attack;
    this.defense_aptitude = parameters.defense_aptitude;
}

function Transact(parameters) {
    this.name = parameters.name;

    this.source_player = parameters.source_player;
    this.source_entity = parameters.source_entity;
    this.source_aptitude = parameters.source_aptitude;

    this.target_player = parameters.target_player;
    this.target_entity = parameters.target_entity;
    this.target_aptitude = parameters.target_aptitude;
}


Player.prototype.add_entity = function (added_entity) {
    var exists = _.some(this.entities,
        function (ent) {
            return (ent.name == added_entity.name)
        });

    if (this.webmana > added_entity.webmana && !exists) {
        this.webmana -= added_entity.price;
        this.entities.push(added_entity);
        return true;
    } else
        return false;
}


/**
 *
 * @param his_entity
 * @param his_aptitude
 * @param enemy is a player
 * @param enemy_entity is an entity for the player
 * @param enemy_vulnerability
 * @returns {Attack} or an attack object
 */
Player.prototype.attack = function (his_entity, his_aptitude, enemy, enemy_entity, enemy_vulnerability) {

    var exists_his_entity = _.some(this.entities,
        function (ent) {
            return (ent.name == his_entity.name)
        });



    var exists_his_aptitude = _.some(his_entity.aptitudes,
        function (apt) {
            return (apt.name == his_aptitude.name)
        });



    var exists_enemy_entity = _.some(enemy.entities,
        function (ent) {
            return (ent.name == enemy_entity.name)
        });


    var exists_enemy_vulnerability = _.some(enemy_entity.vulnerabilities,
        function (vul) {
            return (vul.name == enemy_vulnerability.name)
        });

    if (exists_his_entity && exists_his_aptitude && exists_enemy_entity && exists_enemy_vulnerability) {
        var attack_name = this.name + ':' +
            his_entity.name + ':'
            + his_aptitude.name + '->'
            + enemy.name + ':'
            + enemy_entity.name + ':'
            + enemy_vulnerability.name;

        var the_attack = new Attack({
            name: attack_name,

            source_player: this,
            source_entity: his_entity,
            source_aptitude: his_aptitude,

            target_player: enemy,
            target_entity: enemy_entity,
            target_vulnerability: enemy_vulnerability
        });

        return the_attack;

    }
    return false;
}

/**
 * I implement some basic control, not all of it, lack of time !!
 * @param attack
 * @param defense_aptitude
 */
Player.prototype.defend = function (attack, defense_aptitude) {

    var his_entity_is_attacked = _.some(this.entities,
        function (ent) {
            return (ent.name == attack.target_entity.name)
        });


    var has_defense_aptitude = _.some(attack.target_entity.aptitudes,
        function (apt) {
            return (apt.name == defense_aptitude.name)
        });


    if (his_entity_is_attacked && has_defense_aptitude) {
        var defense_name = this.name + ':'
            + defense_aptitude.name + '||'
            + attack.name;

        var the_defense = new Defense({
            name: defense_name,
            attack: attack,
            defense_aptitude: defense_aptitude
        });
        return the_defense;
    }
    return false;
}

Player.prototype.transact = function (his_entity, his_aptitude, friendly, friendly_entity, friendly_aptitude) {

    var exists_his_entity = _.some(this.entities,
        function (ent) {
            return (ent.name == his_entity.name)
        });


    var exists_his_aptitude = _.some(his_entity.aptitudes,
        function (apt) {
            return (apt.name == his_aptitude.name)
        });

    var exists_friendly_entity = _.some(friendly.entities,
        function (ent) {
            return (ent.name == friendly_entity.name)
        });


    var exists_friendly_aptitude = _.some(friendly_entity.aptitudes,
        function (apt) {
            return (apt.name == friendly_aptitude.name)
        });


    if (exists_his_entity && exists_his_aptitude && exists_friendly_entity && exists_friendly_aptitude) {
        var transact_name = this.name + ':'
            + his_entity.name + ':'
            + his_aptitude.name + '<->'
            + friendly.name + ":"
            + friendly_entity.name + ":"
            + friendly_aptitude.name;

        var the_transact = new Transact({
            name: transact_name,

            source_player: this,
            source_entity: his_entity,
            source_aptitude: his_aptitude,

            target_player: friendly,
            target_entity: friendly_entity,
            target_aptitude: friendly_aptitude

        });

        return the_transact;
    }
    return false;

}



module.exports.Player = Player;
module.exports.Attack = Attack;
module.exports.Defense = Defense;


